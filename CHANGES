v0.4 ()

* We now use DNS to locate SIP entities. Since Indy 9 only supports
  IPv4 addresses, the stack doesn't support handling AAAA records even
  though it doesn't care how addresses look: all layers treat
  addresses as strings, and only the transport layer knows or cares
  that those addresses match a particular format.
* The stack now passes the 3xx STFT tests.
* The Spike.pas unit used a hardcoded username/password, which of
  course made the torture tests fail.
* Authentication's changed a lot: the Transaction layer (i.e., the
  TransactionDispatcher) resends challenged requests, but the
  Transaction-User layer (i.e., the AbstractUserAgent) supplies the
  authentication credentials. Thus, a Transaction receives a 401
  response, the TransactionDispatcher notifies its listeners, the
  UserAgent (which always listens) notifies the user, asking for a
  username/password for the response. The user specifies if they want
  to re-issue the request, and if they do, the TransactionDispatcher
  creates a new client transaction with the credentials. This
  (currently) completely empties the ActionListener interface.
* TIdMethod renamed to TIdNotification.
* The (Abstract) UserAgent now farms out events (things that you
  schedule in a TimerQueue) to separate objects, rather than using
  TNotifyEvents. In fact, anything involving its Actions property now
  works exclusively off blocks/closures sent to the Actions.

v0.3 (2004/12/24)

* Transaction User Actions look like Commands (see the Gang of Four's
  Design Patterns book).
* Transaction User objects (i.e., Actions) and Transactions no longer
  use their own threads for timing events - they use their
  UserAgentCore or Dispatcher to schedule events.
* "Message Modules": If you want a Core to handle call messages
  (INVITE, ACK, BYE, CANCEL), you just call
  Core.AddModule(TIdSipInviteModule). If you want it to also handle
  REGISTER messages, just call
  Core.AddModule(TIdSipRegisterModule). OPTIONS?
  Core.AddModule(TIdSipOptionsModule). In general, if you want a Core
  to handle some message (say, INFO or REFER or MESSAGE or whatever),
  subclass TIdSipMessageModule and create an Outbound and Inbound
  Action for the Module. Use the InviteModule, RegisterModule and
  OptionsModule classes as examples. INVITEs behave differently to
  other messages, so the Register- and OptionsModules will likely help
  you the most.
* All threads now subclass TIdBaseThread, which subclasses TThread and
  not TIdThread.
* Dispatcher now creates transactions for CANCELs.
* You can terminate sessions both before you receive a 200 OK and
  after. In the former case you send a CANCEL & the latter a BYE. We
  check that the CANCEL did actually cancel and, if not, send a
  BYE. (This can happen when the far end accepts the call before your
  CANCEL reaches it.)
* Sessions can now process redirect messages and try the received
  alternate Contacts. We could use a better algorithm here!
* You can now modify sessions. As per RFC 3261 section 14.1, we also
  handle "glare" situations (simultaneous re-INVITEs by two parties in
  the session).
* General system-wide refactorings:
** Sessions now use InviteActions and no longer know about the details
   of receiving/sending INVITEs.
** Actions and Transactions no longer ask their Core/Dispatcher to
   free them. Instead, they mark themselves as Terminated, and the
   Core/Dispatcher removes all terminated Actions/Transactions at
   appropriate times (like after sending/receiving messages).

v0.2 (2004/09/20)

* Parsing SIP messages doesn't raise exceptions. Instead, the messages
  and headers store the original, unparsed, data and you check their
  HasValidSyntax property to find out if the message/header contains
  valid data.
* The SipMessage and SipHeader objects now parse themselves - the
  SipParser now provides helper utilities and such.
* This allows us to simplify the servers drastically - TCP and UDP
  servers do nothing but parse messages and hand them up to the
  Transport object.
* Notification of events now uses the NotificationList. This contains
  a bunch of Interfaces, and you give it a Method (a reified method
  call) which the NotificationList then executes on each of its
  Interfaces. This eliminates a whole bunch of almost-identical
  code.
* The Transaction layer now understands how to process CANCELs as well
  as send them. For Client INVITE transactions only, of course.
* SDP Payload Processor never really worked nicely. We thus replace it
  (keeping it around for the nonce for reference purposes) with
  RTPMediaStreams and company. This implements (most of) RFC 3264, the
  Offer/Answer model.
* Encapsulated the essentials of TIdSocketHandle (local and remote
  addresses and ports) so that high-level objects don't know about
  TIdSocketHandle. This helps to minimise dependencies on the core
  Indy classes, hopefully allowing enterprising programmers to port
  the stack more easily to, say, FreePascal.
* Some threads now wait for TEvents rather than polling to do their
  thing. Much neater.